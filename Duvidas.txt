1 - Configurando o Git

    Criando atalhos para alguns comandos do Git
        1.1 - git config --list -> Irá listar todas as configurações do git na máquina

    Existem 3 níveis de configuração do git
        1.2 - git config --system -> Serve para qualquer projeto pois será configurado para a máquina toda 
        1.3 - git config --global -> Será feita a configuração para o nosso usuário e servirá para qualquer projeto
        1.4 - git config --local -> Será apenas do projeto espeficicado

    Nesse caso utilizaremos o global que são as configurações do nosso usuário para qualquer projeto
        1.5 - git config --global --edit -> Comando para editarmos as configurações do git 
        1.6 - :qa Para sairmos desse modo de configuração
        1.7 - Como o VI é um pouco complicado de usar podemos utilizar um editor de código - git config --global core.editor code
        1.8 - Agora se usarmos novamente o comando git config --global --edit ele abrirá no vscode as configurações

    Após se aberto o arquivo de configuração do git com o vs code podemos notar que ele criou automaticamente a seguinte config
        [core]
	         editor = code
    Porém devemos incluir a flag --wait para que o vscode só abra depois de carregar todas as configurações se não usarmos pode 
    acontecer de abrir em branco.
        [core]
            editor = code --wait    
    
    Criando nossos atalhos
        [alias]
	        s = !git status -s 
            c = !git add --all && git commit -m
            l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'

        1.9 - Com flag -s o output do comando será mais simplificado e se quisermos com mais detalhes podemos usar sem o alias
                Ex: git s | git status

        1.10 - git add --all irá adicionar todos os arquivos que foram modificados 
               git commit -m irá criar o commit 
                    Ex: git c "Meu commit"
    
        1.11 - git l
                %h - Hash do commit reduzida
                %d - Branch e se tiver uma tag irá mostrar também
                %s - Subject mensagem do nosso commit
                %cn - Nome da pessoa que fez o commit
                %cr - Data relativa

2 - Configurando as Dependencias do projeto

    Iniciando o projeto
    2.1 - git init
    2.2 - yarn init -y

    Criando commits pontuais
     type:
        feat     Adição de funcionalidade.
        fix      Correção de defeito.
        docs     Mudança em documentação.
        style    Mudança de formatação ou estilo, que não afeta a execução do código (espaço, tabulação, etc).
        refactor Mudança na organização do código, que não afeta o comportamento existente.
        test     Adição ou mudança de um teste.
        chore    Adição ou mudança em script de build, que não afeta o código de produção.
        perf     Mudança de código para melhoria de desempenho.
        ci       Mudança de configuração de integração contínua.
        build    Mudança em arquivos de build ou em dependências externas.
        temp     Commit temporário, que não deve ser incluído no CHANGELOG.

        git c "chore: add yarn" 

    
    Utilizaremos  um biblioteca que linter de commit para que nossos commits não sejam aceitam se não estiver no padrão
        yarn add git-commit-msg-linter -D

        Criando commits pontuais
            git c "chore: add msg linter"

    Instalando o typescript no projeto
        yarn add typescript @types/node -D - Após a instalação devemos criar um arquivo tsconfig.json
    Config do tsconfig
        {
            "compilerOptions": {
                "outDir": "./dist",
                "module": "commonjs",
                "target": "ES2019",
                "esModuleInterop": true,
                "allowJs": true,
                "strictNullChecks": true
            }
        }

    Config no .gitignore
        node_modules
        dist 

    Criando commits pontuais
            git c "chore: add typescript"


    Instalando eslint Javasript Standard Style - Para que o eslint consiga da um suporte correto para o typescript devemos instalar 
    todos os plugins abaixo

    yarn add typescript@^4 eslint@^7.12.1 eslint-plugin-promise@^5.0.0 eslint-plugin-import@^2.22.1 eslint-plugin-node@^11.1.0 
    @typescript-eslint/eslint-plugin@^4.0.1 eslint-config-standard-with-typescript@latest -D

    Depois da instalação devemos instalar os plugins no vscode
        Eslint

    Agora iremos setar as configurações do nosso eslint criando um arquivo chamado .eslintrc.json, Agora o plugin instalado anteriormente
    Irá ler esse arquivo para poder fazer o linter

    Config do .eslintrc.json
        {
            "extends": "standard-with-typescript",
            "parserOptions": {
                "project": "./tsconfig.json"
            }
        } 

    Criando commits pontuais
            git c "chore: add eslint"

    Devemos criar um arquivo .eslintignore
        Config 
            node_modules
            dist

    Criando commits pontuais, como esquecemos de adicionar o eslintignore no commit anterior podemos juntar um commit com o outro
            git add .
            git commit --amend --no-edit - Dessa forma ele irá juntar os commits e usar a mesma mensagem utilizada no commit anterior
            

    Instalando o husky yarn add husky -D -> Husky é um pacote npm que “torna os hooks Git fáceis.
        Ele nos permite criar hooks para o nosso git - Então podemos executar comandos antes de fazer um commit
        Se você for até a raiz de um projeto inicializado com Git e digitar:
            ls .git/hooks
        Você verá uma lista de ganchos de exemplo, como pre-push, pre-rebase, pre-commit e assim por diante. 
        Esta é uma maneira de escrevermos algum código de plugin para executar alguma lógica antes de realizar a ação do Git.
        Se quisermos garantir que o código foi devidamente lintado e formatado, antes de alguém criar um commit usando o comando 
        git commit, poderíamos escrever um hook Git de pre-commit.

    Após a instalação devemos criar um arquivo .huskyrc.json
    Config
        {
            "hooks": {
                "pre-commit": "lint-staged"
            }
        }


    Com o intuito de ajudar a quem possa se interessar o husky já está na versão 6, após várias reclamações de problemas com a versão 5.

    Tenho usado a quase 15 dias e tenho percebido que essa versão está um pouco mais rápida.

    A forma de configurar mudou um pouco, mas continua simples é só seguir a aula 4. Configurando as dependências. 
    E quando digitar  npm i husky -D já vai instalar a versão 6.x.x. Logo depois para habilitar o Git hooks 
    não precisará mais criar o arquivo .huskyrc.json, bastará apenas digitar no terminal npx husky install , isto criará uma pasta .husky.

    Para criar o pre-commit igual ao da aula para funcionar com o lint-staged basta digitar 
        npx husky add .husky/pre-commit "npx lint-staged"
    
    Para configurar o lint-staged no husky, eu tive que rodar o comando  npx husky add .husky/pre-commit "npm run lint-staged"
    Depois, para configurar o git-commit-msg-linter, tive que executar npx husky add .husky/commit-msg '.git/hooks/commit-msg \"$1"' , 
    mas o arquivo não foi gerado corretamente, então tive que editar o arquivo .husky/commit-msg e incluir o $1 manualmente
    
    Para quem está utilizando o git-commit-msg-linter para funcionar com husky 6 terá de configurar o commit-msg. 
    Isso também é bem simples basta digitar no terminal o comando npx husky add .husky/commit-msg ".git/hooks/commit-msg \$1"


    Utilizaremos em conjunto uma biblioteca que irá ajudar o husky quando tiver muitos arquivos para o eslint validar antes
    do commit não demorar muito pq ele vai fazer com que o husky rode apenas nos arquivos que estejam na staged do git 
    que no caso seria apenas os arquivos modificados - yarn add lint-staged -D

    Agora devemos criar um arquivo chamado .lintstagedrc.json
    {
        "*.ts": [
            "eslint 'src/**' --fix",
            "git add"
        ]
    }

    Toda esse configura vai nos ajudar a impedir de termos commits defeituosos na aplicação
        
        Criando commits pontuais
            git c "chore: add husky and lint staged"

    
    Instalando o jest que será a biblioteca de teste utilizada no projeto - yarn add jest @types/jest ts-jest -D

    Após instalação devemos executar o comando - npx jest --init

    jest.config.js
    module.exports = {
        roots: ['<rootDir>/src'],
        collectCoverageFrom: ['<rootDir>/src/**/*.ts'],
        coverageDirectory: 'coverage',
        testEnvironment: 'node',
        transform: {
            '.+\\.ts$': 'ts-jest'
        }
        // clearMocks: true,
        // collectCoverage: true,
        // coverageProvider: 'v8'   
    }

    Criando commits pontuais
            git c "chore: add jest"

    Depois de configuramos o jest devemos incluir uma config no nosso package.json e no lintstagedrc
    Agora além dele fazer o linter ele vai executar os testes e dessa forma garatimos que não teremos código defeituosos e nem testes
    falhando

    {
        "*.ts": [
            "eslint 'src/**' --fix",
            "yarn test:staged",
            "git add"
        ]
    }

    "scripts": {
        "test": "jest",
        "test:staged": "jest"
    }

     Criando commits pontuais
            git c "chore: add jest to lint staged"

     Criando commits pontuais
        É recomendado que seja feito o commit da classe de produção primeiro e depois arquivo de teste
        pq se acontecer de revertemos um commit de uma classe de produção o teste irá dar errado pois 
        não irá conter o arquivo.
        Devemos então adicionar separadamente da arquivo e commitar conforme o exemplo abaixo
            git add src/presentation/controllers/signup.ts
            git commit -m "feat: ensure SignUpController returns 400 if no name is provided"

